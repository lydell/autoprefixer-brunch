// Generated by CoffeeScript 1.8.0

/*
 * Copyright 2013-2014 Simon Lydell
 * X11 (“MIT”) Licensed. (See LICENSE.)
 */
var Autoprefixer, autoprefixer,
  __hasProp = {}.hasOwnProperty;

autoprefixer = require("autoprefixer-core");

module.exports = Autoprefixer = (function() {
  Autoprefixer.prototype.brunchPlugin = true;

  Autoprefixer.prototype.type = "stylesheet";

  Autoprefixer.prototype.extension = "css";

  Autoprefixer.prototype.defaultEnv = "*";

  function Autoprefixer(config) {
    var key, oldOptions, options, value, _ref;
    this.config = config;
    options = (_ref = this.config.plugins.autoprefixer) != null ? _ref : {};
    if ("options" in options) {
      console.warn("`config.plugins.autoprefixer.options` is deprecated. Put the options directly in `config.plugins.autoprefixer` instead");
      oldOptions = options.options;
      options = {
        browsers: options.browsers
      };
      for (key in oldOptions) {
        if (!__hasProp.call(oldOptions, key)) continue;
        value = oldOptions[key];
        options[key] = value;
      }
    }
    this.compiler = autoprefixer(options);
  }

  Autoprefixer.prototype.optimize = function(_arg, callback) {
    var data, error, map, path, result;
    data = _arg.data, path = _arg.path, map = _arg.map;
    try {
      result = this.compiler.process(data, {
        from: path,
        to: path,
        map: {
          prev: map.toJSON(),
          annotation: false,
          sourcesContent: false
        }
      });
    } catch (_error) {
      error = _error;
      return callback(error);
    }
    return callback(null, {
      data: result.css,
      map: result.map.toJSON()
    });
  };

  return Autoprefixer;

})();
